														Collection
														----------
-> Collections are growable in nature that is based on our requirement we can increase or decrease the size.
-> Collections can hold both Homogenous and Heterogenous elements.
-> Every Collection class is implimented based on some standared datastructure hence rearymade method support is available for every requirement being a programmer.
-> if we want to repersent a group of indivisual Object as a single entity then we should go for Collection.

 
## limitation of Array :--
1. Array are fixed in size.
2. Array can hold only similler type of Object.
3. There are no underlying data structure.

  
## Collection framework:---
	Collection framework defines several classes and interface to represent a group of Object as a single entity.
	In general Collection interface is consider as root interface of Collection framework.
Note: --
		Their is no concurrent class which impliments Collection interface directly.

									Nine key interface of Collection framework
									===========================================
1. Collection
2. List
3. Set
4. Shorted Set
5. Navigable Set
6. Queue 
7. Map
8. Shorted Map
9. Navigable Map

1. Collection :--
			if we want to repersent a group of indivisual Object as a single entity then we should go for Collection.

2. List :--
			It is the child interface of Collection ,if we want to repersent a group of indivisual Object as a single entity where
			duplicates are allow and insertion order must be preserve then we should go for List.
													
3. Set :---
		 It is the child interface of Collection ,if we want to repersent a group of indivisual Object as a single entity where
			duplicates are not allowed and insertion order is not preserve then we should go for Set.		
			
4. Shorted Set :---
				It is the child interface of Set ,if we want to repersent a group of indivisual Object as a single entity where
			duplicates are not allowed and inserted according to some Shorting order then we should go for Shorted Set.
			
5. Navigable Set:---
				It is the child interface of Shorted Set ,if defines several method of Navigation purposes.
				
				
6. Queue :---
	It is the child interface of Collection ,if we want to repersent a group of indivisual Object prior to processing then we should go for Queue.
	
7. Map :--
		Map is not child interface of Collection ,if we want to repersent a group of indivisual Object as key value pairs then we should go for Map.
		both key and values are Object duplicate key is not allowed but value can be duplicated.

8. Shorted Map:---
	   It is the child interface of Map , if we want to represent a group of order of Object as key value pairs accordig to some Shorting order of key 
			then we should go for Shorted Map.
			
9. Navigable Map :---
			It is the child interface of ShortedMap , It defines several method of Navigable purposes.
			
			


Qus- Differen between List and Set ?

Ans- 
1. Duplicates are allowed   but Duplicates are not allowed .
2. insertion order most be preserve  but insertion order not be preserve			


Qus- Differen between iterator and listIterator ?

Ans- 
1. The element in forward direction only. but The element in forward and backword direction both.
2. iterator can be used list, set and Queue. but listIterator can be used only List.
3. Both read and remove . but read, remove , replace and add.

Qus- Differen between ArrayList and LinkedList ?

Ans-
1. The underlying data structure is growable Array. but The underlying data structure for LinkedList is double LinkedList.
2. ArrayList is slow because it internally use Array.  but LinkedList is faster than ArrayList because it use double LinkedList.
3. ArrayList is better for storing and accessing data. but LinkedList is better for manipulating data.
4. ArrayList is impliments randam access interface. but LinkedList doesn't impliments randam access interface.


Qus- Differen between Comprable and Comparator ?

Ans-
1. Comprable meant for default nature sorting order. but Comparator meant for customize sorting orrder.
2. Comprable present in java.lang package. but Comparator present in java.util package.
3. Comprable contain one method compareTo(). but Comparator contain two method 1> compara() and 2> equels() method.

													HashMap
													-------
													
->HashMap works on hashing techines. Hashing techines means searching the algorithm. Hashcode is a value generated by the JVM representing actual
   address of the Object.
-> HashMap internally stores mapping in the form of Map.
-> Null is allowed for key(only once), Null is allowed for values (Any number of times).
-> HashMap can find a bucket  location to store value Object, which is actually an index of yhe internal array.

													
Qus- Differen between HashMap and Hashtable ?

Ans- 